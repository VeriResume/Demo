{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createFieldActions = undefined;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _get2 = require('../utils/get');\n\nvar _get3 = _interopRequireDefault(_get2);\n\nvar _mapValues = require('../utils/map-values');\n\nvar _mapValues2 = _interopRequireDefault(_mapValues);\n\nvar _actionTypes = require('../action-types');\n\nvar _actionTypes2 = _interopRequireDefault(_actionTypes);\n\nvar _batchActions = require('./batch-actions');\n\nvar _batchActions2 = _interopRequireDefault(_batchActions);\n\nvar _getValidity = require('../utils/get-validity');\n\nvar _getValidity2 = _interopRequireDefault(_getValidity);\n\nvar _isValidityValid = require('../utils/is-validity-valid');\n\nvar _isValidityValid2 = _interopRequireDefault(_isValidityValid);\n\nvar _isValidityInvalid = require('../utils/is-validity-invalid');\n\nvar _isValidityInvalid2 = _interopRequireDefault(_isValidityInvalid);\n\nvar _invertValidity = require('../utils/invert-validity');\n\nvar _invertValidity2 = _interopRequireDefault(_invertValidity);\n\nvar _track = require('../utils/track');\n\nvar _getForm = require('../utils/get-form');\n\nvar _getForm2 = _interopRequireDefault(_getForm);\n\nvar _getFieldFromState = require('../utils/get-field-from-state');\n\nvar _getFieldFromState2 = _interopRequireDefault(_getFieldFromState);\n\nvar _nullAction = require('../constants/null-action');\n\nvar _nullAction2 = _interopRequireDefault(_nullAction);\n\nvar _invariant = require('invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar defaultStrategies = {\n  get: _get3.default,\n  getForm: _getForm2.default,\n  getFieldFromState: _getFieldFromState2.default\n};\n\nfunction createFieldActions() {\n  var s = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultStrategies;\n\n  var addIntent = function addIntent(model, intent) {\n    return {\n      type: _actionTypes2.default.ADD_INTENT,\n      model: model,\n      intent: intent\n    };\n  };\n\n  var clearIntents = function clearIntents(model, intents) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    return {\n      type: _actionTypes2.default.CLEAR_INTENTS,\n      model: model,\n      intents: intents,\n      options: options\n    };\n  };\n\n  var focus = function focus(model, value) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    return _extends({\n      type: _actionTypes2.default.FOCUS,\n      model: model,\n      value: value\n    }, options);\n  };\n\n  var silentFocus = function silentFocus(model, value) {\n    return focus(model, value, {\n      silent: true\n    });\n  };\n\n  var blur = function blur(model) {\n    return {\n      type: _actionTypes2.default.BLUR,\n      model: model\n    };\n  };\n\n  var setPristine = function setPristine(model) {\n    return {\n      type: _actionTypes2.default.SET_PRISTINE,\n      model: model\n    };\n  };\n\n  var setDirty = function setDirty(model) {\n    return {\n      type: _actionTypes2.default.SET_DIRTY,\n      model: model\n    };\n  };\n\n  var setInitial = function setInitial(model) {\n    return {\n      type: _actionTypes2.default.SET_INITIAL,\n      model: model\n    };\n  };\n\n  var setPending = function setPending(model) {\n    var pending = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    var options = arguments[2];\n    return _extends({\n      type: _actionTypes2.default.SET_PENDING,\n      model: model,\n      pending: pending\n    }, options);\n  };\n\n  var setValidating = function setValidating(model) {\n    var validating = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    return {\n      type: _actionTypes2.default.SET_VALIDATING,\n      model: model,\n      validating: validating\n    };\n  };\n\n  var setValidity = function setValidity(model, validity) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    return _extends({\n      type: options.errors ? _actionTypes2.default.SET_ERRORS : _actionTypes2.default.SET_VALIDITY,\n      model: model\n    }, options, _defineProperty({}, options.errors ? 'errors' : 'validity', validity));\n  };\n\n  var resetValidity = function resetValidity(model) {\n    var omitKeys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    return {\n      type: _actionTypes2.default.RESET_VALIDITY,\n      model: model,\n      omitKeys: omitKeys\n    };\n  };\n\n  var setFieldsValidity = function setFieldsValidity(model, fieldsValidity) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    return {\n      type: _actionTypes2.default.SET_FIELDS_VALIDITY,\n      model: model,\n      fieldsValidity: fieldsValidity,\n      options: options\n    };\n  };\n\n  var setErrors = function setErrors(model, errors) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    return setValidity(model, errors, _extends({}, options, {\n      errors: true\n    }));\n  };\n\n  var setFieldsErrors = function setFieldsErrors(model, fieldsErrors, options) {\n    return setFieldsValidity(model, fieldsErrors, _extends({}, options, {\n      errors: true\n    }));\n  };\n\n  var resetErrors = resetValidity;\n\n  var setTouched = function setTouched(model) {\n    return {\n      type: _actionTypes2.default.SET_TOUCHED,\n      model: model\n    };\n  };\n\n  var setUntouched = function setUntouched(model) {\n    return {\n      type: _actionTypes2.default.SET_UNTOUCHED,\n      model: model\n    };\n  };\n\n  var asyncSetValidity = function asyncSetValidity(model, validator) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    return function (dispatch, getState) {\n      var value = s.get(getState(), model);\n      dispatch(setValidating(model, true));\n\n      var done = function done(validity) {\n        dispatch(setValidity(model, validity, _extends({\n          async: true\n        }, options)));\n      };\n\n      var immediateResult = validator(value, done);\n\n      if (typeof immediateResult !== 'undefined') {\n        done(immediateResult);\n      }\n    };\n  };\n\n  var asyncSetErrors = function asyncSetErrors(model, validator) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    return asyncSetValidity(model, validator, _extends({\n      errors: true\n    }, options));\n  };\n\n  var setSubmitted = function setSubmitted(model) {\n    var submitted = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    return {\n      type: _actionTypes2.default.SET_SUBMITTED,\n      model: model,\n      submitted: submitted\n    };\n  };\n\n  var setSubmitFailed = function setSubmitFailed(model) {\n    var submitFailed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    var options = arguments[2];\n    return _extends({\n      type: _actionTypes2.default.SET_SUBMIT_FAILED,\n      model: model,\n      submitFailed: submitFailed\n    }, options);\n  };\n\n  var submit = function submit(model, promise) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    if (typeof promise === 'undefined') {\n      return addIntent(model, {\n        type: 'submit'\n      });\n    }\n\n    return function (dispatch, getState) {\n      if (options.validate) {\n        var form = s.getForm(getState(), model);\n        (0, _invariant2.default)(form, 'Unable to submit form with validation. ' + 'Could not find form for \"%s\" in the store.', model);\n\n        if (!form.$form.valid) {\n          return dispatch(_nullAction2.default);\n        }\n\n        dispatch(setPending(model, true));\n      } else if (options.validators || options.errors) {\n        var validators = options.validators || options.errors;\n        var isErrors = options.errors;\n        var value = s.get(getState(), model);\n        var validity = (0, _getValidity2.default)(validators, value);\n        var valid = options.errors ? !(0, _isValidityInvalid2.default)(validity) : (0, _isValidityValid2.default)(validity);\n\n        if (!valid) {\n          return dispatch(isErrors ? setErrors(model, validity) : setValidity(model, validity));\n        }\n\n        dispatch((0, _batchActions2.default)(model, [setValidity(model, isErrors ? (0, _invertValidity2.default)(validity) : validity), setPending(model, true)]));\n      } else {\n        dispatch(setPending(model, true));\n      }\n\n      var errorsAction = options.fields ? setFieldsErrors : setErrors;\n      promise.then(function (response) {\n        dispatch((0, _batchActions2.default)(model, [setSubmitted(model, true), setValidity(model, response)]));\n      }).catch(function (rejection) {\n        var error = rejection instanceof Error ? rejection.message : rejection;\n        dispatch((0, _batchActions2.default)(model, [setSubmitFailed(model), errorsAction(model, error, {\n          async: true\n        })]));\n      });\n      return promise;\n    };\n  };\n\n  var submitFields = function submitFields(model, promise) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    return submit(model, promise, _extends({}, options, {\n      fields: true\n    }));\n  };\n\n  var validSubmit = function validSubmit(model, promise) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    return submit(model, promise, _extends({}, options, {\n      validate: true\n    }));\n  };\n\n  var validate = function validate(model, validators) {\n    return function (dispatch, getState) {\n      var value = s.get(getState(), model);\n      var validity = (0, _getValidity2.default)(validators, value);\n      dispatch(setValidity(model, validity));\n    };\n  };\n\n  var validateErrors = function validateErrors(model, errorValidators) {\n    return function (dispatch, getState) {\n      var value = s.get(getState(), model);\n      var errors = (0, _getValidity2.default)(errorValidators, value);\n      dispatch(setValidity(model, errors, {\n        errors: true\n      }));\n    };\n  };\n\n  var validateFields = function validateFields(model, fieldValidators) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    return function (dispatch, getState) {\n      var modelValue = s.get(getState(), model);\n      var fieldsValidity = (0, _mapValues2.default)(fieldValidators, function (validator, field) {\n        var fieldValue = field ? s.get(modelValue, field) : modelValue;\n        var fieldValidity = (0, _getValidity2.default)(validator, fieldValue);\n        return fieldValidity;\n      });\n      var fieldsValiditySetter = options.errors ? setFieldsErrors : setFieldsValidity;\n      dispatch(fieldsValiditySetter(model, fieldsValidity));\n    };\n  };\n\n  var validateFieldsErrors = function validateFieldsErrors(model, fieldErrorsValidators) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    return validateFields(model, fieldErrorsValidators, _extends({}, options, {\n      errors: true\n    }));\n  };\n\n  return (0, _mapValues2.default)({\n    blur: blur,\n    focus: focus,\n    silentFocus: silentFocus,\n    submit: submit,\n    submitFields: submitFields,\n    validSubmit: validSubmit,\n    setDirty: setDirty,\n    setErrors: setErrors,\n    setInitial: setInitial,\n    setPending: setPending,\n    setValidating: setValidating,\n    setPristine: setPristine,\n    setSubmitted: setSubmitted,\n    setSubmitFailed: setSubmitFailed,\n    setTouched: setTouched,\n    setUntouched: setUntouched,\n    setValidity: setValidity,\n    setFieldsValidity: setFieldsValidity,\n    setFieldsErrors: setFieldsErrors,\n    resetValidity: resetValidity,\n    resetErrors: resetErrors,\n    validate: validate,\n    validateErrors: validateErrors,\n    validateFields: validateFields,\n    validateFieldsErrors: validateFieldsErrors,\n    asyncSetValidity: asyncSetValidity,\n    asyncSetErrors: asyncSetErrors,\n    addIntent: addIntent,\n    clearIntents: clearIntents\n  }, _track.trackable);\n}\n\nexports.createFieldActions = createFieldActions;\nexports.default = createFieldActions();","map":null,"metadata":{},"sourceType":"script"}
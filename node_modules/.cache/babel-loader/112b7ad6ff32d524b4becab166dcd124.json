{"ast":null,"code":"/**\n * This allows you to work with object hierarchies that have been frozen\n * with Object.freeze().  \"get\" operations can use the normal JS syntax,\n * but operations that modify the data will have to return partial copies of\n * the structure. The portions of the structure that did not change will\n * === their previous values.\n *\n * Inspired by clojure/mori and Immutable.js\n */\n\"use strict\";\n\nvar i = exports; // we only care about objects or arrays for now\n\nfunction weCareAbout(val) {\n  return null !== val && (Array.isArray(val) || // This will skip objects created with `new Foo()`\n  // and objects created with `Object.create(proto)`\n  // The benefit is ignoring DOM elements and event emitters,\n  // which are often circular.\n  isObjectLike(val));\n}\n\nfunction isObjectLike(val) {\n  return typeof val === \"object\" && val.constructor === Object && Object.getPrototypeOf(val) === Object.prototype;\n}\n\nfunction arrayClone(arr) {\n  var index = 0,\n      length = arr.length,\n      result = Array(length);\n\n  for (; index < length; index += 1) {\n    result[index] = arr[index];\n  }\n\n  return result;\n}\n\nfunction objClone(obj) {\n  var index = 0,\n      keys = Object.keys(obj),\n      length = keys.length,\n      key,\n      result = {};\n\n  for (; index < length; index += 1) {\n    key = keys[index];\n    result[key] = obj[key];\n  }\n\n  return result;\n}\n\nfunction clone(coll) {\n  if (Array.isArray(coll)) {\n    return arrayClone(coll);\n  } else {\n    return objClone(coll);\n  }\n}\n\nfunction freezeIfNeeded(coll) {\n  if (weCareAbout(coll) && !Object.isFrozen(coll) && process.env.NODE_ENV !== \"production\") {\n    return baseFreeze(coll, []);\n  }\n\n  return coll;\n}\n\nfunction _freeze(coll) {\n  if (process.env.NODE_ENV === \"production\") {\n    return coll;\n  }\n\n  if (typeof coll === \"object\") {\n    return Object.freeze(coll);\n  } else {\n    return coll;\n  }\n}\n\nfunction baseFreeze(coll, prevNodes) {\n  if (prevNodes.some(function (node) {\n    return node === coll;\n  })) {\n    throw new Error(\"object has a reference cycle\");\n  }\n\n  Object.freeze(coll);\n  prevNodes.push(coll);\n  Object.keys(coll).forEach(function (key) {\n    var prop = coll[key];\n\n    if (weCareAbout(prop)) {\n      baseFreeze(prop, prevNodes);\n    }\n  });\n  prevNodes.pop();\n  return coll;\n}\n/**\n * recrursively freeze an object and all its child objects\n * @param  {Object|Array} coll\n * @return {Object|Array}\n */\n\n\nexports.freeze = function freeze(coll) {\n  if (process.env.NODE_ENV === \"production\") {\n    return coll;\n  }\n\n  return baseFreeze(coll, []);\n};\n/**\n * recursively un-freeze an object, by cloning frozen collections\n * @param  {[type]} coll [description]\n * @return {[type]}      [description]\n */\n\n\nexports.thaw = function thaw(coll) {\n  if (weCareAbout(coll) && Object.isFrozen(coll)) {\n    var newColl = clone(coll);\n    Object.keys(newColl).forEach(function (key) {\n      newColl[key] = thaw(newColl[key]);\n    });\n    return newColl;\n  }\n\n  return coll;\n};\n/**\n * set a value on an object or array\n * @param  {Object|Array}  coll\n * @param  {String|Number} key   Key or index\n * @param  {Object}        value\n * @return {Object|Array}        new object hierarchy with modifications\n */\n\n\nexports.assoc = function assoc(coll, key, value) {\n  if (coll[key] === value) {\n    return _freeze(coll);\n  }\n\n  var newObj = clone(coll);\n  newObj[key] = freezeIfNeeded(value);\n  return _freeze(newObj);\n};\n\nexports.set = exports.assoc;\n/**\n * un-set a value on an object or array\n * @param  {Object|Array}  coll\n * @param  {String|Number} key  Key or Index\n * @return {Object|Array}       New object or array\n */\n\nexports.dissoc = function dissoc(coll, key) {\n  var newObj = clone(coll);\n  delete newObj[key];\n  return _freeze(newObj);\n};\n\nexports.unset = exports.dissoc;\n/**\n * set a value deep in a hierarchical structure\n * @param  {Object|Array} coll\n * @param  {Array}        path    A list of keys to traverse\n * @param  {Object}       value\n * @return {Object|Array}       new object hierarchy with modifications\n */\n\nexports.assocIn = function assocIn(coll, path, value) {\n  var key0 = path[0];\n\n  if (path.length === 1) {\n    // simplest case is a 1-element array.  Just a simple assoc.\n    return i.assoc(coll, key0, value);\n  } else {\n    // break the problem down.  Assoc this object with the first key\n    // and the result of assocIn with the rest of the keys\n    return i.assoc(coll, key0, assocIn(coll[key0] || {}, path.slice(1), value));\n  }\n};\n\nexports.setIn = exports.assocIn;\n/**\n * get an object from a hierachy based on an array of keys\n * @param  {Object|Array} coll\n * @param  {Array}        path    list of keys\n * @return {Object}       value, or undefined\n */\n\nfunction baseGet(coll, path) {\n  return (path || []).reduce(function (curr, key) {\n    if (!curr) {\n      return;\n    }\n\n    return curr[key];\n  }, coll);\n}\n\nexports.getIn = baseGet;\n/**\n * Update a value in a hierarchy\n * @param  {Object|Array}   coll\n * @param  {Array}          path     list of keys\n * @param  {Function} callback The existing value with be passed to this.\n *                             Return the new value to set\n * @return {Object|Array}      new object hierarchy with modifications\n */\n\nexports.updateIn = function updateIn(coll, path, callback) {\n  var existingVal = baseGet(coll, path);\n  return i.assocIn(coll, path, callback(existingVal));\n}; // generate wrappers for the mutative array methods\n\n\n[\"push\", \"unshift\", \"pop\", \"shift\", \"reverse\", \"sort\"].forEach(function (methodName) {\n  exports[methodName] = function (arr, val) {\n    var newArr = arrayClone(arr);\n    newArr[methodName](freezeIfNeeded(val));\n    return _freeze(newArr);\n  };\n\n  exports[methodName].displayName = \"icepick.\" + methodName;\n}); // splice is special because it is variadic\n\nexports.splice = function splice(arr\n/*, args*/\n) {\n  var newArr = arrayClone(arr),\n      args = rest(arguments).map(freezeIfNeeded);\n  newArr.splice.apply(newArr, args);\n  return _freeze(newArr);\n}; // slice is non-mutative\n\n\nexports.slice = function slice(arr, arg1, arg2) {\n  var newArr = arr.slice(arg1, arg2);\n  return _freeze(newArr);\n};\n\n[\"map\", \"filter\"].forEach(function (methodName) {\n  exports[methodName] = function (fn, arr) {\n    var newArr = arr[methodName](fn);\n    return _freeze(newArr);\n  };\n\n  exports[methodName].displayName = \"icepick.\" + methodName;\n});\n\nexports.extend = exports.assign = function assign()\n/*...objs*/\n{\n  var newObj = rest(arguments).reduce(singleAssign, arguments[0]);\n  return _freeze(newObj);\n};\n\nfunction singleAssign(obj1, obj2) {\n  return Object.keys(obj2).reduce(function (obj, key) {\n    return i.assoc(obj, key, obj2[key]);\n  }, obj1);\n}\n\nexports.merge = merge;\n\nfunction merge(target, source, resolver) {\n  if (target == null || source == null) {\n    return target;\n  }\n\n  return Object.keys(source).reduce(function (obj, key) {\n    var sourceVal = source[key];\n    var targetVal = obj[key];\n    var resolvedSourceVal = resolver ? resolver(targetVal, sourceVal, key) : sourceVal;\n\n    if (weCareAbout(sourceVal) && weCareAbout(targetVal)) {\n      // if they are both frozen and reference equal, assume they are deep equal\n      if ((Object.isFrozen(resolvedSourceVal) && Object.isFrozen(targetVal) || process.env.NODE_ENV === \"production\") && resolvedSourceVal === targetVal) {\n        return obj;\n      }\n\n      if (Array.isArray(sourceVal)) {\n        return i.assoc(obj, key, resolvedSourceVal);\n      } // recursively merge pairs of objects\n\n\n      return assocIfDifferent(obj, key, merge(targetVal, resolvedSourceVal, resolver));\n    } // primitive values, stuff with prototypes\n\n\n    return assocIfDifferent(obj, key, resolvedSourceVal);\n  }, target);\n}\n\nfunction assocIfDifferent(target, key, value) {\n  if (target[key] === value) {\n    return target;\n  }\n\n  return i.assoc(target, key, value);\n}\n\nfunction _slice(array, start) {\n  var begin = start || 0;\n  var len = array.length;\n  len -= begin;\n  len = len < 0 ? 0 : len;\n  var result = new Array(len);\n\n  for (var i = 0; i < len; i += 1) {\n    result[i] = array[i + begin];\n  }\n\n  return result;\n}\n\nfunction rest(args) {\n  return _slice(args, 1);\n}\n\nvar chainProto = {\n  value: function value() {\n    return this.val;\n  },\n  thru: function thru(fn) {\n    this.val = freezeIfNeeded(fn(this.val));\n    return this;\n  }\n};\nObject.keys(exports).forEach(function (methodName) {\n  chainProto[methodName] = function ()\n  /*...args*/\n  {\n    var args = _slice(arguments);\n\n    args.unshift(this.val);\n    this.val = exports[methodName].apply(null, args);\n    return this;\n  };\n});\n\nexports.chain = function chain(val) {\n  var wrapped = Object.create(chainProto);\n  wrapped.val = val;\n  return wrapped;\n}; // for testing\n\n\nexports._weCareAbout = weCareAbout;\nexports._slice = _slice;","map":null,"metadata":{},"sourceType":"script"}
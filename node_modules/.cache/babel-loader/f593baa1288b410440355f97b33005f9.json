{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nexports.default = changeActionReducer;\n\nvar _actionTypes = require('../../action-types');\n\nvar _actionTypes2 = _interopRequireDefault(_actionTypes);\n\nvar _icepick = require('icepick');\n\nvar _icepick2 = _interopRequireDefault(_icepick);\n\nvar _get = require('../../utils/get');\n\nvar _get2 = _interopRequireDefault(_get);\n\nvar _shallowEqual = require('../../utils/shallow-equal');\n\nvar _shallowEqual2 = _interopRequireDefault(_shallowEqual);\n\nvar _isPlainObject = require('../../utils/is-plain-object');\n\nvar _isPlainObject2 = _interopRequireDefault(_isPlainObject);\n\nvar _mapValues = require('../../utils/map-values');\n\nvar _mapValues2 = _interopRequireDefault(_mapValues);\n\nvar _formReducer = require('../form-reducer');\n\nvar _initialFieldState = require('../../constants/initial-field-state');\n\nvar _initialFieldState2 = _interopRequireDefault(_initialFieldState);\n\nvar _assocIn = require('../../utils/assoc-in');\n\nvar _assocIn2 = _interopRequireDefault(_assocIn);\n\nvar _getFormValue = require('../../utils/get-form-value');\n\nvar _getFormValue2 = _interopRequireDefault(_getFormValue);\n\nvar _invariant = require('invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction updateFieldValue(field, action) {\n  var parentModel = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;\n  var value = action.value,\n      removeKeys = action.removeKeys,\n      silent = action.silent,\n      load = action.load,\n      model = action.model,\n      external = action.external;\n  var fieldState = field && field.$form ? field.$form : field;\n  var changedFieldProps = {\n    validated: false,\n    retouched: fieldState.submitted ? true : fieldState.retouched,\n    // If change originated from Control component (not externally),\n    // then there is no need to remind Control to validate itself.\n    intents: external ? [{\n      type: 'validate'\n    }] : [],\n    pristine: silent ? fieldState.pristine : false,\n    value: value,\n    loadedValue: load ? value : fieldState.loadedValue\n  };\n\n  if ((0, _shallowEqual2.default)(field.value, value)) {\n    return _icepick2.default.merge(field, changedFieldProps);\n  }\n\n  if (removeKeys) {\n    (0, _invariant2.default)(field && field.$form, 'Unable to remove keys. ' + 'Field for \"%s\" in store is not an array/object.', model);\n    var valueIsArray = Array.isArray(field.$form.value);\n    var removeKeysArray = Array.isArray(removeKeys) ? removeKeys : [removeKeys];\n    var result = void 0;\n\n    if (valueIsArray) {\n      result = [];\n      Object.keys(field).forEach(function (key) {\n        if (!!~removeKeysArray.indexOf(+key) || key === '$form') return;\n        result[key] = _extends({}, field[key]);\n      });\n\n      var finalResult = _extends({}, result.filter(function (f) {\n        return f;\n      }).map(function (subField, index) {\n        return _extends({}, subField, {\n          model: model + '.' + index\n        });\n      }));\n\n      finalResult.$form = field.$form;\n      return finalResult;\n    }\n\n    result = _extends({}, field);\n    Object.keys(field).forEach(function (key) {\n      if (!!~removeKeysArray.indexOf(key)) {\n        delete result['' + key];\n      }\n    });\n    return result;\n  }\n\n  if (!Array.isArray(value) && !(0, _isPlainObject2.default)(value)) {\n    return _icepick2.default.merge(field, _icepick2.default.set(changedFieldProps, 'value', value));\n  }\n\n  var updatedField = (0, _mapValues2.default)(value, function (subValue, index) {\n    // TODO: refactor\n    var subField = field[index] || (0, _formReducer.createInitialState)('' + (parentModel ? parentModel + '.' : '') + model + '.' + index, subValue);\n\n    if (Object.hasOwnProperty.call(subField, '$form')) {\n      return updateFieldValue(subField, {\n        model: index,\n        value: subValue,\n        external: external,\n        silent: silent,\n        load: load\n      }, parentModel ? parentModel + '.' + model : model);\n    }\n\n    if ((0, _shallowEqual2.default)(subValue, subField.value)) {\n      return subField;\n    }\n\n    return _icepick2.default.merge(subField, _icepick2.default.assign(changedFieldProps, {\n      value: subValue,\n      loadedValue: load ? subValue : subField.loadedValue\n    }));\n  });\n\n  var dirtyFormState = _icepick2.default.merge(field.$form || _initialFieldState2.default, _icepick2.default.set(changedFieldProps, 'retouched', field.submitted || field.$form && field.$form.retouched));\n\n  return _icepick2.default.set(updatedField, '$form', dirtyFormState);\n}\n\nfunction changeActionReducer(state, action, localPath) {\n  if (action.type !== _actionTypes2.default.CHANGE) return state;\n  var field = (0, _get2.default)(state, localPath, (0, _formReducer.createInitialState)(action.model, action.value));\n  var updatedField = updateFieldValue(field, action);\n  if (!localPath.length) return updatedField;\n  var updatedState = (0, _assocIn2.default)(state, localPath, updatedField, function (form) {\n    if (!form.$form) return form;\n    var formValue = (0, _getFormValue2.default)(form);\n\n    var formUpdates = _extends({}, form.$form, {\n      value: formValue\n    });\n\n    if (action.silent) {\n      formUpdates.loadedValue = formValue;\n    } else {\n      formUpdates.pristine = false;\n    }\n\n    return _extends({}, form, {\n      $form: formUpdates\n    });\n  });\n  return updatedState;\n}","map":null,"metadata":{},"sourceType":"script"}
{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createFormClass = undefined;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _reactRedux = require('react-redux');\n\nvar _shallowEqual = require('../utils/shallow-equal');\n\nvar _shallowEqual2 = _interopRequireDefault(_shallowEqual);\n\nvar _get2 = require('../utils/get');\n\nvar _get3 = _interopRequireDefault(_get2);\n\nvar _omit = require('../utils/omit');\n\nvar _omit2 = _interopRequireDefault(_omit);\n\nvar _actions = require('../actions');\n\nvar _actions2 = _interopRequireDefault(_actions);\n\nvar _getValidity = require('../utils/get-validity');\n\nvar _getValidity2 = _interopRequireDefault(_getValidity);\n\nvar _invertValidators = require('../utils/invert-validators');\n\nvar _invertValidators2 = _interopRequireDefault(_invertValidators);\n\nvar _isValidityInvalid = require('../utils/is-validity-invalid');\n\nvar _isValidityInvalid2 = _interopRequireDefault(_isValidityInvalid);\n\nvar _isValid = require('../form/is-valid');\n\nvar _isValid2 = _interopRequireDefault(_isValid);\n\nvar _getForm = require('../utils/get-form');\n\nvar _getForm2 = _interopRequireDefault(_getForm);\n\nvar _getModel = require('../utils/get-model');\n\nvar _getModel2 = _interopRequireDefault(_getModel);\n\nvar _getField = require('../utils/get-field');\n\nvar _getField2 = _interopRequireDefault(_getField);\n\nvar _deepCompareChildren = require('../utils/deep-compare-children');\n\nvar _deepCompareChildren2 = _interopRequireDefault(_deepCompareChildren);\n\nvar _containsEvent = require('../utils/contains-event');\n\nvar _containsEvent2 = _interopRequireDefault(_containsEvent);\n\nvar _mergeValidity = require('../utils/merge-validity');\n\nvar _mergeValidity2 = _interopRequireDefault(_mergeValidity);\n\nvar _invariant = require('invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar propTypes = {\n  component: _propTypes2.default.any,\n  validators: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.func]),\n  errors: _propTypes2.default.object,\n  validateOn: _propTypes2.default.oneOf(['change', 'submit']),\n  model: _propTypes2.default.string.isRequired,\n  modelValue: _propTypes2.default.any,\n  formValue: _propTypes2.default.object,\n  onSubmit: _propTypes2.default.func,\n  onSubmitFailed: _propTypes2.default.func,\n  dispatch: _propTypes2.default.func,\n  children: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.node]),\n  store: _propTypes2.default.shape({\n    subscribe: _propTypes2.default.func,\n    dispatch: _propTypes2.default.func,\n    getState: _propTypes2.default.func\n  }),\n  storeSubscription: _propTypes2.default.any,\n  onUpdate: _propTypes2.default.func,\n  onChange: _propTypes2.default.func,\n  getRef: _propTypes2.default.func,\n  getDispatch: _propTypes2.default.func,\n  onBeforeSubmit: _propTypes2.default.func,\n  hideNativeErrors: _propTypes2.default.bool,\n  // standard HTML attributes\n  action: _propTypes2.default.string,\n  noValidate: _propTypes2.default.bool\n};\nvar htmlAttributes = ['action', 'noValidate'];\nvar disallowedPropTypeKeys = Object.keys(propTypes).filter(function (key) {\n  return htmlAttributes.indexOf(key) === -1;\n});\nvar defaultStrategy = {\n  get: _get3.default,\n  getForm: _getForm2.default,\n  actions: _actions2.default\n};\n\nfunction createFormClass() {\n  var s = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultStrategy;\n\n  var Form = function (_Component) {\n    _inherits(Form, _Component);\n\n    function Form(props) {\n      _classCallCheck(this, Form);\n\n      var _this = _possibleConstructorReturn(this, (Form.__proto__ || Object.getPrototypeOf(Form)).call(this, props));\n\n      _this.handleSubmit = _this.handleSubmit.bind(_this);\n      _this.handleReset = _this.handleReset.bind(_this);\n      _this.handleValidSubmit = _this.handleValidSubmit.bind(_this);\n      _this.handleInvalidSubmit = _this.handleInvalidSubmit.bind(_this);\n      _this.attachNode = _this.attachNode.bind(_this);\n      _this.state = {\n        lastSubmitEvent: null\n      };\n      return _this;\n    }\n\n    _createClass(Form, [{\n      key: 'getChildContext',\n      value: function getChildContext() {\n        return {\n          model: this.props.model,\n          localStore: this.props.store\n        };\n      }\n    }, {\n      key: 'componentDidMount',\n      value: function componentDidMount() {\n        if ((0, _containsEvent2.default)(this.props.validateOn, 'change')) {\n          this.validate(this.props, true);\n        }\n\n        if (this.props.getDispatch) {\n          this.props.getDispatch(this.props.dispatch);\n        }\n      }\n    }, {\n      key: 'componentWillReceiveProps',\n      value: function componentWillReceiveProps(nextProps) {\n        if ((0, _containsEvent2.default)(nextProps.validateOn, 'change')) {\n          this.validate(nextProps);\n        }\n      }\n    }, {\n      key: 'shouldComponentUpdate',\n      value: function shouldComponentUpdate(nextProps, nextState) {\n        return (0, _deepCompareChildren2.default)(this, nextProps, nextState);\n      }\n    }, {\n      key: 'componentDidUpdate',\n      value: function componentDidUpdate(prevProps) {\n        this.handleIntents();\n\n        if (!(0, _shallowEqual2.default)(prevProps.formValue, this.props.formValue)) {\n          this.handleUpdate();\n        }\n\n        if (!(0, _shallowEqual2.default)(prevProps.modelValue, this.props.modelValue)) {\n          this.handleChange();\n        }\n      }\n    }, {\n      key: 'handleUpdate',\n      value: function handleUpdate() {\n        if (this.props.onUpdate) {\n          this.props.onUpdate(this.props.formValue);\n        }\n      }\n    }, {\n      key: 'handleChange',\n      value: function handleChange() {\n        if (this.props.onChange) {\n          this.props.onChange(this.props.modelValue);\n        }\n      }\n    }, {\n      key: 'attachNode',\n      value: function attachNode(node) {\n        if (!node) return;\n        this._node = node;\n        this._node.submit = this.handleSubmit;\n        if (this.props.getRef) this.props.getRef(node);\n      }\n    }, {\n      key: 'validate',\n      value: function validate(nextProps) {\n        var _this2 = this;\n\n        var initial = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n        var submit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n        var _props = this.props,\n            model = _props.model,\n            dispatch = _props.dispatch,\n            formValue = _props.formValue,\n            modelValue = _props.modelValue;\n        var validators = nextProps.validators,\n            errors = nextProps.errors;\n        if (!formValue) return;\n\n        if (!validators && !errors && modelValue !== nextProps.modelValue) {\n          return;\n        }\n\n        var validatorsChanged = validators !== this.props.validators || errors !== this.props.errors;\n        var fieldKeys = (validators ? Object.keys(validators) : []).concat(errors ? Object.keys(errors) : []);\n        var fieldsErrors = {};\n        var validityChanged = false;\n        var keysToValidate = [];\n        fieldKeys.forEach(function (key) {\n          if (!!~keysToValidate.indexOf(key)) return;\n          var valuesChanged = key === '' ? modelValue !== nextProps.modelValue : s.get(modelValue, key) !== s.get(nextProps.modelValue, key);\n\n          if (submit || initial || valuesChanged || validators && _this2.props.validators[key] !== validators[key] || errors && _this2.props.errors[key] !== errors[key] || !!~key.indexOf('[]')) {\n            keysToValidate.push(key);\n          }\n        });\n\n        var validateField = function validateField(field, errorValidator) {\n          if (!!~field.indexOf('[]')) {\n            var _field$split = field.split('[]'),\n                _field$split2 = _slicedToArray(_field$split, 2),\n                parentModel = _field$split2[0],\n                childModel = _field$split2[1];\n\n            var nextValue = parentModel ? s.get(nextProps.modelValue, parentModel) : nextProps.modelValue;\n            nextValue.forEach(function (subValue, index) {\n              validateField(parentModel + '[' + index + ']' + childModel, errorValidator);\n            });\n          } else {\n            var _nextValue = field ? s.get(nextProps.modelValue, field) : nextProps.modelValue;\n\n            var currentErrors = (0, _getField2.default)(formValue, field).errors;\n            var fieldErrors = (0, _getValidity2.default)(errorValidator, _nextValue);\n\n            if (!validityChanged && !(0, _shallowEqual2.default)(fieldErrors, currentErrors)) {\n              validityChanged = true;\n            }\n\n            fieldsErrors[field] = (0, _mergeValidity2.default)(fieldsErrors[field], fieldErrors);\n          }\n        };\n\n        keysToValidate.forEach(function (field) {\n          if (validators && validators[field]) {\n            validateField(field, (0, _invertValidators2.default)(validators[field]));\n          }\n\n          if (errors && errors[field]) {\n            validateField(field, errors[field]);\n          }\n        });\n\n        if (typeof validators === 'function') {\n          var nextValue = nextProps.modelValue;\n          var currentValue = modelValue;\n\n          if (!submit && !initial && !validatorsChanged && nextValue === currentValue) {\n            // If neither the validators nor the values have changed,\n            // the validity didn't change.\n            return;\n          }\n\n          var multiFieldErrors = (0, _getValidity2.default)(validators, nextValue);\n\n          if (multiFieldErrors) {\n            Object.keys(multiFieldErrors).forEach(function (key) {\n              // key will be the model value to apply errors to.\n              var fieldErrors = multiFieldErrors[key];\n              var currentErrors = (0, _getField2.default)(formValue, key).errors; // Invert validators\n\n              Object.keys(fieldErrors).forEach(function (validationName) {\n                fieldErrors[validationName] = !fieldErrors[validationName];\n              });\n\n              if (!validityChanged && !(0, _shallowEqual2.default)(fieldErrors, currentErrors)) {\n                validityChanged = true;\n              }\n\n              fieldsErrors[key] = (0, _mergeValidity2.default)(fieldsErrors[key], fieldErrors);\n            });\n          }\n        } // Compute form-level validity\n\n\n        if (!fieldsErrors.hasOwnProperty('') && !~fieldKeys.indexOf('')) {\n          fieldsErrors[''] = false;\n          validityChanged = validityChanged || (0, _isValidityInvalid2.default)(formValue.$form.errors);\n        }\n\n        if (validityChanged) {\n          dispatch(s.actions.setFieldsErrors(model, fieldsErrors, {\n            merge: true\n          }));\n        }\n\n        if (submit) {\n          dispatch(s.actions.addIntent(model, {\n            type: 'submit'\n          }));\n        }\n      }\n    }, {\n      key: 'handleValidSubmit',\n      value: function handleValidSubmit(options) {\n        var _props2 = this.props,\n            dispatch = _props2.dispatch,\n            model = _props2.model,\n            modelValue = _props2.modelValue,\n            onSubmit = _props2.onSubmit;\n        dispatch(s.actions.setPending(model, true, options));\n        if (onSubmit) onSubmit(modelValue, this.state.lastSubmitEvent);\n      }\n    }, {\n      key: 'handleInvalidSubmit',\n      value: function handleInvalidSubmit(options) {\n        var _props3 = this.props,\n            onSubmitFailed = _props3.onSubmitFailed,\n            formValue = _props3.formValue,\n            dispatch = _props3.dispatch;\n\n        if (onSubmitFailed) {\n          onSubmitFailed(formValue);\n        }\n\n        dispatch(s.actions.setSubmitFailed(this.props.model, true, options));\n      }\n    }, {\n      key: 'handleReset',\n      value: function handleReset(e) {\n        if (e) e.preventDefault();\n        this.props.dispatch(s.actions.reset(this.props.model));\n      }\n    }, {\n      key: 'handleIntents',\n      value: function handleIntents() {\n        var _this3 = this;\n\n        var _props4 = this.props,\n            formValue = _props4.formValue,\n            noValidate = _props4.noValidate;\n        formValue.$form.intents.forEach(function (intent) {\n          switch (intent.type) {\n            case 'submit':\n              {\n                if (noValidate || (0, _isValid2.default)(formValue, {\n                  async: false\n                })) {\n                  _this3.handleValidSubmit({\n                    clearIntents: intent\n                  });\n                } else {\n                  _this3.handleInvalidSubmit({\n                    clearIntents: intent\n                  });\n                }\n\n                return;\n              }\n\n            default:\n              return;\n          }\n        });\n      }\n    }, {\n      key: 'handleSubmit',\n      value: function handleSubmit(e) {\n        if (e && !this.props.action) e.preventDefault();\n        if (e && e.persist) e.persist();\n        var _props5 = this.props,\n            modelValue = _props5.modelValue,\n            formValue = _props5.formValue,\n            onSubmit = _props5.onSubmit,\n            validators = _props5.validators,\n            onBeforeSubmit = _props5.onBeforeSubmit;\n        if (onBeforeSubmit) onBeforeSubmit(e);\n        var formValid = formValue ? formValue.$form.valid : true;\n\n        if (!validators && onSubmit && formValid) {\n          onSubmit(modelValue, e);\n          return modelValue;\n        }\n\n        this.setState({\n          lastSubmitEvent: e\n        });\n        this.validate(this.props, false, true);\n        return modelValue;\n      }\n    }, {\n      key: 'render',\n      value: function render() {\n        var _props6 = this.props,\n            component = _props6.component,\n            children = _props6.children,\n            formValue = _props6.formValue,\n            hideNativeErrors = _props6.hideNativeErrors,\n            noValidate = _props6.noValidate;\n        var allowedProps = (0, _omit2.default)(this.props, disallowedPropTypeKeys);\n        var renderableChildren = typeof children === 'function' ? children(formValue) : children;\n        return _react2.default.createElement(component, _extends({}, allowedProps, {\n          onSubmit: this.handleSubmit,\n          onReset: this.handleReset,\n          ref: this.attachNode,\n          noValidate: hideNativeErrors || noValidate\n        }), renderableChildren);\n      }\n    }]);\n\n    return Form;\n  }(_react.Component);\n\n  process.env.NODE_ENV !== \"production\" ? Form.propTypes = propTypes : void 0;\n  Form.defaultProps = {\n    validateOn: 'change',\n    component: 'form'\n  };\n  Form.childContextTypes = {\n    model: _propTypes2.default.any,\n    localStore: _propTypes2.default.shape({\n      subscribe: _propTypes2.default.func,\n      dispatch: _propTypes2.default.func,\n      getState: _propTypes2.default.func\n    })\n  };\n\n  function mapStateToProps(state, _ref) {\n    var model = _ref.model;\n    var modelString = (0, _getModel2.default)(model, state);\n    var form = s.getForm(state, modelString);\n    (0, _invariant2.default)(form, 'Unable to create Form component. ' + 'Could not find form for \"%s\" in the store.', modelString);\n    return {\n      model: modelString,\n      modelValue: s.get(state, modelString),\n      formValue: form\n    };\n  }\n\n  return (0, _reactRedux.connect)(mapStateToProps)(Form);\n}\n\nexports.createFormClass = createFormClass;\nexports.default = createFormClass();","map":null,"metadata":{},"sourceType":"script"}
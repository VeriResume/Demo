{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nexports.createModelActions = createModelActions;\n\nvar _get2 = require('../utils/get');\n\nvar _get3 = _interopRequireDefault(_get2);\n\nvar _identity = require('../utils/identity');\n\nvar _identity2 = _interopRequireDefault(_identity);\n\nvar _icepick = require('icepick');\n\nvar _icepick2 = _interopRequireDefault(_icepick);\n\nvar _getValue = require('../utils/get-value');\n\nvar _getValue2 = _interopRequireDefault(_getValue);\n\nvar _isMulti = require('../utils/is-multi');\n\nvar _isMulti2 = _interopRequireDefault(_isMulti);\n\nvar _actionTypes = require('../action-types');\n\nvar _actionTypes2 = _interopRequireDefault(_actionTypes);\n\nvar _mapValues = require('../utils/map-values');\n\nvar _mapValues2 = _interopRequireDefault(_mapValues);\n\nvar _track = require('../utils/track');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar defaultStrategies = {\n  get: _get3.default,\n  getValue: _getValue2.default,\n  splice: _icepick2.default.splice,\n  merge: _icepick2.default.merge,\n  remove: _icepick2.default.dissoc,\n  push: _icepick2.default.push,\n  length: function length(value) {\n    return value.length;\n  },\n  object: {},\n  array: []\n};\n\nfunction optionsFromArgs(args, index) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  if (typeof index === 'undefined') return undefined;\n  return _extends({}, options, args[index]);\n}\n\nfunction createModelActions() {\n  var s = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultStrategies;\n\n  var change = function change(model, value) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {}; // option defaults\n\n    var changeOptions = _extends({\n      silent: false,\n      multi: (0, _isMulti2.default)(model),\n      external: true\n    }, options);\n\n    if (typeof value === 'function') {\n      return function (dispatch, getState) {\n        var modelValue = s.get(getState(), model);\n        return dispatch(change(model, value(modelValue), options));\n      };\n    }\n\n    return _extends({\n      type: _actionTypes2.default.CHANGE,\n      model: model,\n      value: s.getValue(value)\n    }, changeOptions);\n  };\n\n  function createModifierAction(modifier, defaultValue, optionsIndex, getOptions) {\n    var actionCreator = function actionCreator(model) {\n      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      return function (dispatch, getState) {\n        var modelValue = s.get(getState(), model, defaultValue);\n        var value = modifier.apply(undefined, [modelValue].concat(args));\n        var options = getOptions ? getOptions.apply(undefined, [value].concat(args)) : undefined;\n        dispatch(change(model, value, optionsFromArgs(args, optionsIndex - 1, options)));\n      };\n    };\n\n    return actionCreator;\n  }\n\n  var xor = createModifierAction(function (value, item) {\n    var iteratee = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function (_item) {\n      return _item === item;\n    };\n    var valueWithoutItem = value.filter(function (_item) {\n      return !iteratee(_item);\n    });\n    return s.length(value) === s.length(valueWithoutItem) ? s.push(value, item) : valueWithoutItem;\n  }, s.array, 3);\n  var push = createModifierAction(function (value, item) {\n    return s.push(value || s.array, item);\n  }, s.array, 2);\n  var toggle = createModifierAction(function (value) {\n    return !value;\n  }, undefined, 1);\n\n  var checkWithValue = function checkWithValue(model, value) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var currentValue = options.currentValue;\n\n    if ((0, _isMulti2.default)(model)) {\n      var valueWithItem = currentValue || s.array;\n      var valueWithoutItem = (valueWithItem || s.array).filter(function (item) {\n        return item !== value;\n      });\n      var multiValue = s.length(valueWithoutItem) === s.length(valueWithItem) ? s.push(valueWithItem, value) : valueWithoutItem;\n      return change(model, multiValue);\n    }\n\n    if (typeof value === 'undefined') {\n      return change(model, !currentValue);\n    }\n\n    return change(model, value);\n  };\n\n  var check = function check(model, value) {\n    return function (dispatch, getState) {\n      var modelValue = s.get(getState(), model);\n      var action = checkWithValue(model, value, {\n        currentValue: modelValue\n      });\n      dispatch(action);\n    };\n  };\n\n  var filter = createModifierAction(function (value, iteratee) {\n    return value.filter(iteratee);\n  }, s.array, 2);\n\n  var reset = function reset(model) {\n    return {\n      type: _actionTypes2.default.RESET,\n      model: model\n    };\n  };\n\n  var map = createModifierAction(function (value) {\n    var iteratee = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _identity2.default;\n    return value.map(iteratee);\n  }, s.array, 2);\n  var remove = createModifierAction(function (value, index) {\n    return s.splice(value, index, 1);\n  }, s.array, 2, function (_, index) {\n    return {\n      removeKeys: [index]\n    };\n  });\n  var move = createModifierAction(function (value, indexFrom, indexTo) {\n    if (indexFrom >= s.length(value) || indexTo >= s.length(value)) {\n      throw new Error('Error moving array item: invalid bounds ' + indexFrom + ', ' + indexTo);\n    }\n\n    var item = s.get(value, indexFrom);\n    var removed = s.splice(value, indexFrom, 1);\n    var inserted = s.splice(removed, indexTo, 0, item);\n    return inserted;\n  }, s.array, 3);\n  var merge = createModifierAction(s.merge, {}, 3);\n  var omit = createModifierAction(function (value) {\n    var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    var propsArray = typeof props === 'string' ? [props] : props;\n    var newValue = propsArray.reduce(function (acc, prop) {\n      return s.remove(acc, prop);\n    }, value);\n    return newValue;\n  }, {}, 2, function (_, props) {\n    return {\n      removeKeys: props\n    };\n  });\n\n  var load = function load(model, values, options) {\n    return change(model, values, _extends({\n      silent: true,\n      load: true\n    }, options));\n  };\n\n  return (0, _mapValues2.default)({\n    change: change,\n    xor: xor,\n    push: push,\n    toggle: toggle,\n    check: check,\n    checkWithValue: checkWithValue,\n    filter: filter,\n    reset: reset,\n    map: map,\n    remove: remove,\n    move: move,\n    merge: merge,\n    omit: omit,\n    load: load\n  }, _track.trackable);\n}\n\nexports.default = createModelActions();","map":null,"metadata":{},"sourceType":"script"}